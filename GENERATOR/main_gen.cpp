#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include "generator.h"
#include "IsBadPtr.h"
#include "TXTreader.h"
#include "colors.h"


int main()
{
    FILE *SourceFile = fopen("./GENERATOR/input/source.txt", "r");

    FILE *CmdEnumsFile = fopen("./GENERATOR/output/CmdCodesEnums.h", "w");
    FILE *AsmInstrSetFile = fopen("./GENERATOR/output/AsmInstrSet.cpp", "w");
    FILE *SpuInstrSetFile = fopen("./GENERATOR/output/SpuInstrSet.cpp", "w");

    size_t count_line = 0;
    char **arr_ptr = TXTreader(SourceFile, &count_line, toupper);
    if (IsBadPtr((void*)arr_ptr))
        perror(ANSI_COLOR_RED "Error reading SourceFile!" ANSI_COLOR_RESET);


    if (GenCmdEnum(SourceFile, CmdEnumsFile, arr_ptr, count_line))
        perror(ANSI_COLOR_RED "Error creating CmdEnumsFile!" ANSI_COLOR_RESET);
    else
        printf(ANSI_COLOR_GREEN "SUCCESS\n" ANSI_COLOR_RESET);

    if (GenAsmInstrSet(SourceFile, AsmInstrSetFile, arr_ptr, count_line))
        perror(ANSI_COLOR_RED "Error creating AsmInstrSetFile!" ANSI_COLOR_RESET);
    else
        printf(ANSI_COLOR_GREEN "SUCCESS\n" ANSI_COLOR_RESET);

    if (GenSpuInstrSet(SourceFile, SpuInstrSetFile, arr_ptr, count_line))
        perror(ANSI_COLOR_RED "Error creating SpuInstrSetFile!" ANSI_COLOR_RESET);
    else
        printf(ANSI_COLOR_GREEN "SUCCESS\n" ANSI_COLOR_RESET);

    free(arr_ptr);
    fclose(SourceFile);
    fclose(CmdEnumsFile);
    fclose(AsmInstrSetFile);
    fclose(SpuInstrSetFile);
    
    return 0;
}


GenErr_t GenCmdEnum(FILE *SourceFile, FILE *CmdEnumsFile, char **arr_ptr, size_t count_line)
{
    if (IsBadPtr(SourceFile))
        return ERROR;

    if (IsBadPtr(CmdEnumsFile))
        return ERROR;

    if (IsBadPtr((void*)arr_ptr) || count_line < 0)
        return ERROR;
        
    fprintf(CmdEnumsFile, "// Automatically generated by Andrey Murugov's code-generator. Do not edit!!!\n\n\n");

    char cmd[16] = {};
    unsigned int num_cmd = 0;
    char cmd_spec[16] = {};

    fprintf(CmdEnumsFile, "enum CmdCodes\n");
    fprintf(CmdEnumsFile, "{\n");
    for (size_t line = 0; line < count_line - 1; ++line)
    {
        if (sscanf(arr_ptr[line], "%s %u %s", cmd, &num_cmd, cmd_spec))
            fprintf(CmdEnumsFile, "\tCMD_%s = 0x%02X,\n", cmd, num_cmd);
        else
            return ERROR;
    }
    if (sscanf(arr_ptr[count_line - 1], "%s %u %s", cmd, &num_cmd, cmd_spec))
        fprintf(CmdEnumsFile, "\tCMD_%s = 0x%02X\n", cmd, num_cmd);
    else
        return ERROR;
    fprintf(CmdEnumsFile, "};\n\n");


    fprintf(CmdEnumsFile, "enum CmdHash\n");
    fprintf(CmdEnumsFile, "{\n");

    for (size_t line = 0; line < count_line - 1; ++line)
    {
        if (sscanf(arr_ptr[line], "%s %u %s", cmd, &num_cmd, cmd_spec))
            fprintf(CmdEnumsFile, "\tHASH_%s = 0x%02X,\n", cmd, (unsigned int)HashCmd(cmd));
        else
            return ERROR;
    }
    if (sscanf(arr_ptr[count_line - 1], "%s %u %s", cmd, &num_cmd, cmd_spec))
        fprintf(CmdEnumsFile, "\tHASH_%s = 0x%02X\n", cmd, (unsigned int)HashCmd(cmd));
    else
        return ERROR;
    fprintf(CmdEnumsFile, "};");

    return SUCCESS;
}


GenErr_t GenAsmInstrSet(FILE *SourceFile, FILE *AsmInstrSetFile, char **arr_ptr, size_t count_line)
{
    if (IsBadPtr(SourceFile))
        return ERROR;

    if (IsBadPtr(AsmInstrSetFile))
        return ERROR;
        
    fprintf(AsmInstrSetFile, "// Automatically generated by Andrey Murugov's code-generator. Do not edit!!!\n\n\n");

    char cmd[16] = {};
    unsigned int num_cmd = 0;
    char cmd_spec[16] = {};

    fprintf(AsmInstrSetFile, "const WrapCmd asm_instr_set[] =\n");
    fprintf(AsmInstrSetFile, "{\n");
    for (size_t line = 0; line < count_line - 1; ++line)
    {
        if (sscanf(arr_ptr[line], "%s %u %s", cmd, &num_cmd, cmd_spec))
            fprintf(AsmInstrSetFile, "\t{%s, HASH_%s,  CMD_%s},\n", (HashCmd(cmd_spec) == WITH) ? "CmdWithArg": "CmdWithoutArg", cmd, cmd);
        else
            return ERROR;
    }
    if (sscanf(arr_ptr[count_line - 1], "%s %u %s", cmd, &num_cmd, cmd_spec))
        fprintf(AsmInstrSetFile, "\t{%s, HASH_%s,  CMD_%s}\n", (HashCmd(cmd_spec) == WITH) ? "CmdWithArg": "CmdWithoutArg", cmd, cmd);
    else
        return ERROR;
    fprintf(AsmInstrSetFile, "};\n\n");

    fprintf(AsmInstrSetFile, "#define LEN_INSTR_SET sizeof(asm_instr_set) / sizeof(*asm_instr_set)");

    return SUCCESS;
}


GenErr_t GenSpuInstrSet(FILE *SourceFile, FILE *SpuInstrSetFile, char **arr_ptr, size_t count_line)
{
    if (IsBadPtr(SourceFile))
        return ERROR;

    if (IsBadPtr(SpuInstrSetFile))
        return ERROR;
        
    fprintf(SpuInstrSetFile, "// Automatically generated by Andrey Murugov's code generator. Do not edit!!!\n\n\n");

    char cmd[16] = {};
    unsigned int num_cmd = 0;
    char cmd_spec[16] = {};

    fprintf(SpuInstrSetFile, "const WrapCmd spu_instr_set[] =\n");
    fprintf(SpuInstrSetFile, "{\n");
    for (size_t line = 0; line < count_line - 1; ++line)
    {
        if (sscanf(arr_ptr[line], "%s %u %s", cmd, &num_cmd, cmd_spec))
            fprintf(SpuInstrSetFile, "\t{FUNC_CMD_%s,  CMD_%s},\n", cmd, cmd);
        else
            return ERROR;
    }
    if (sscanf(arr_ptr[count_line - 1], "%s %u %s", cmd, &num_cmd, cmd_spec))
        fprintf(SpuInstrSetFile, "\t{FUNC_CMD_%s,  CMD_%s}\n", cmd, cmd);
    else
        return ERROR;
    fprintf(SpuInstrSetFile, "};\n\n");

    fprintf(SpuInstrSetFile, "#define LEN_INSTR_SET sizeof(spu_instr_set) / sizeof(*spu_instr_set)");

    return SUCCESS;
}